{
  "name": "message-stream",
  "version": "1.0.0",
  "homepage": "https://github.com/dominictarr/message-stream",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/message-stream.git"
  },
  "dependencies": {
    "duplex": "~1.0.0"
  },
  "scripts": {
    "test": "node test/index.js"
  },
  "author": {
    "name": "'Dominic Tarr'",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "license": "MIT",
  "readme": "# message-stream\n\nduplex stream of messages (with minimal edgecases!).\n\n<img src=https://secure.travis-ci.org/'Dominic Tarr'/message-stream.png?branch=master>\n\n## example\n\nchat example that broadcasts messages, but does not echo them!\n\n``` js\nvar net = require('net')\nvar MessageStream = require('message-stream')\nvar chat = new (require('events').EventEmitter)()\n\nchat.createStream = function () {\n  var ms = MessageStream(function (data) {\n    chat.emit('message', data, ms)\n  })\n  chat.on('message', function (data, source) {\n    if(source != ms)\n      ms.queue(data)\n  })\n}\n\nif(opts.server) {\n  net.createServer(function (stream) {\n    stream.pipe(chat.createStream()).pipe(stream)\n  })\n  .listen(opts.port)\n}\nelse {\n  var stream = net.connect(opts.port)\n  stream.pipe(chat.createServer()).pipe(stream)\n}\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "description": "duplex stream of messages (with minimal edgecases!).",
  "bugs": {
    "url": "https://github.com/dominictarr/message-stream/issues"
  },
  "_id": "message-stream@1.0.0",
  "_from": "message-stream@~1.0.0"
}
